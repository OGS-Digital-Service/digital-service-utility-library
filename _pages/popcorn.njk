---
layout: layout.njk
title: Popcorn Standup

permalink: "popcorn/"
---
{# {% from '../_includes/_components.njk' import popcorn %}
<style>{% include '../_includes/popcorn/_popcorn.css'  %}</style> #}
<h2 class="text-lg font-bold m-4"> Eventually this will have popcorn </h2>

<div 
  class="todo-container" 
  x-data="todoApp()"
>
  <div class="input_area">
    <form>
      <fieldset>
        <input 
	  class="user_input_task border-2 m-4 rounded-sm p-2 w-1/3"
	  type="text"
	  placeholder="Who is on standup?"
	/>
	<button	@click="addTodo" class="p-2 border-2">Add Person</button>
      </fieldset>
    </form>
  </div>	
	
  <div class="task_list m-4" id="list-container">
    <template 
      x-show="todos.length"
      x-for="task in todos"
      :key="task.id"
    >
      <div class="w-1/3 flex my-4">
        <div 
          x-text="task.item"
	  class="task-item font-bold text-lg"
	></div>
	<button
          class="task-remove ml-8 p-1 font-xs border-2 rounded-sm hover:border-red-600"
          @click="remove(event, task.id)"
	>remove from list</button>
      </div>
    </template>
    <div x-show="!todos.length">We're all done! </div>
  </div>
</div>


<button id="shuffle" class="p-2 border-2 m-4"> Randomize! </button>


<script>
    const todoApp = () => ({
  todos: [],
  addTodo(event) {
    // supress the submit so the the page does not refersh 
    event.preventDefault();

    // retrieve data directly from DOM with magic property root
    var item = this.$root.querySelector('.user_input_task').value;
    // if the value is not null 
    if (item) {
      const id = this.todos.length;
      this.todos = [
        ...this.todos, 
	{
          id,
          item: item,
          completed: false,
	  editing: false
	}
      ]	  
      // reset the input field 
      this.$root.querySelector('.user_input_task').value = '';
    }
  },
  remove(event, id) {
      // so supress the submit so the the page does not refersh 
      event.preventDefault();
		
      // filter function to remove todos based on id
      this.todos = this.todos.filter((todo) => todo.id !== id);
  },
});



  function shuffleArray(array) {
        for (let i = array.length - 1; i > 0; i--) {
            const j = Math.floor(Math.random() * (i + 1));
            [array[i], array[j]] = [array[j], array[i]]; // Swap elements
        }
    }

const randomizeButton = document.getElementById('shuffle');
console.log(randomizeButton)
    randomizeButton.addEventListener('click', function() {
        const parentDiv = document.getElementById('list-container');
        const divs = Array.from(parentDiv.children); // Convert to array

        shuffleArray(divs); // Shuffle the array

        // Clear existing children
        while (parentDiv.firstChild) {
            parentDiv.removeChild(parentDiv.firstChild);
        }

        // Append shuffled divs
        divs.forEach(div => parentDiv.appendChild(div));
    });




    </script>